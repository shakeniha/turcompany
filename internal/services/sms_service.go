package services

import (
	"fmt"
	"math/rand"
	"time"
	"turcompany/internal/models"
	"turcompany/internal/repositories"
)

type SMS_Service struct {
	Repo *repositories.SMSConfirmationRepository
}

// generateCode —Å–æ–∑–¥–∞–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
func (s *SMS_Service) generateCode() string {
	rand.Seed(time.Now().UnixNano())
	return fmt.Sprintf("%06d", rand.Intn(1000000))
}

// SendSMS —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥
func (s *SMS_Service) SendSMS(documentID int64, phone string) error {
	code := s.generateCode()
	sms := &models.SMSConfirmation{
		DocumentID:  documentID,
		Phone:       phone,
		SMSCode:     code,
		SentAt:      time.Now(),
		Confirmed:   false,
		ConfirmedAt: time.Time{},
	}
	_, err := s.Repo.Create(sms)
	if err != nil {
		return err
	}

	// test –≤ —Ö–æ—Å—Ç–µ 
	fmt.Printf("üì≤ SMS sent to %s: code is %s\n", phone, code)
	return nil
}

// ResendSMS –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –Ω–µ –∏—Å—Ç—ë–∫)
func (s *SMS_Service) ResendSMS(documentID int64) error {
	existing, err := s.Repo.GetLatestByDocumentID(documentID)
	if err != nil {
		return err
	}
	if existing == nil || existing.Confirmed || s.IsCodeExpired(existing.SentAt) {
		return s.SendSMS(documentID, existing.Phone)
	}

	// –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥
	fmt.Printf("üîÅ Resending SMS to %s: code is %s\n", existing.Phone, existing.SMSCode)
	return nil
}

// ConfirmCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–¥
func (s *SMS_Service) ConfirmCode(documentID int64, code string) (bool, error) {
	sms, err := s.Repo.GetByDocumentIDAndCode(documentID, code)
	if err != nil {
		return false, err
	}
	if sms == nil || sms.Confirmed {
		return false, nil
	}
	if s.IsCodeExpired(sms.SentAt) {
		return false, nil
	}

	sms.Confirmed = true
	sms.ConfirmedAt = time.Now()
	return true, s.Repo.Update(sms)
}

// IsCodeExpired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)
func (s *SMS_Service) IsCodeExpired(sentAt time.Time) bool {
	expiration := sentAt.Add(5 * time.Minute)
	return time.Now().After(expiration)
}

// DeleteConfirmation —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
func (s *SMS_Service) DeleteConfirmation(documentID int64) error {
	return s.Repo.DeleteByDocumentID(documentID)
}

// GetLatestByDocumentID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
func (s *SMS_Service) GetLatestByDocumentID(documentID int64) (*models.SMSConfirmation, error) {
	return s.Repo.GetLatestByDocumentID(documentID)
}
